
service:
  ## Kubernetes service type, ClusterIP and NodePort are supported at present
  type: ClusterIP
  # clusterIp: None
  port: 3306
  ## Specify the nodePort value for the LoadBalancer and NodePort service types.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
  ##
  # nodePort:
  #   master: 30001
  #   slave: 30002

## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  ## Specifies whether a ServiceAccount should be created
  ##
  create: false
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the mariadb.fullname template
  # name:

## Role Based Access
## Ref: https://kubernetes.io/docs/admin/authorization/rbac/
##

rbac:
  create: false

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001

# # Use existing secret (ignores root, db and replication passwords)
# existingSecret:

rootUser:
  ## MariaDB admin password
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb#setting-the-root-password-on-first-run
  ##

  ##
  ## Option to force users to specify a password. That is required for ''helm upgrade'' to work properly.
  ## If it is not force, a random password will be generated.
  forcePassword: false

db:
  forcePassword: false

replication:
  ## Enable replication. This enables the creation of replicas of MariaDB. If false, only a
  ## master deployment would be created
  enabled: false


## initdb scripts
## Specify dictionnary of scripts to be run at first boot
## Alternatively, you can put your scripts under the files/docker-entrypoint-initdb.d directory
##
initdbScripts:
  initdb.sql: |
     use trader;
     CREATE TABLE portfolio(portfolioId INT NOT NULL AUTO_INCREMENT, clientId VARCHAR(64) NOT NULL, total DECIMAL(12,2), loyalty VARCHAR(8), balance DECIMAL(12,2) DEFAULT 50000, commissions DECIMAL(12,2), freeTrades INTEGER, PRIMARY KEY(portfolioId));
     ALTER TABLE portfolio AUTO_INCREMENT=1000;
     CREATE TABLE stock(portfolioId INT NOT NULL, symbol VARCHAR(8) NOT NULL, shares INTEGER, price DECIMAL(12,2), total DECIMAL(12,2), lastQuoted TIMESTAMP, commission DECIMAL(12,2), FOREIGN KEY (portfolioId) REFERENCES portfolio(portfolioId) ON DELETE CASCADE, PRIMARY KEY(portfolioId, symbol));
     CREATE TABLE client(clientId VARCHAR(64) NOT NULL, firstName VARCHAR(64) NOT NULL, lastName VARCHAR(64) NOT NULL, email VARCHAR(64) NOT NULL, phone VARCHAR(64) NOT NULL, preferredContactMethod ENUM('email','text','phone','mail') NOT NULL, PRIMARY KEY(clientId));

## Configure master resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
master:
  resources:
   limits:
      cpu: 500m
      memory: 500Mi
   requests:
      cpu: 200m
      memory: 250Mi


master:
  persistence:
    ## If true, use a Persistent Volume Claim, If false, use emptyDir
    ##
    enabled: false
    # storageClass: ''-''

slave:
  replicas: 0
